{"version":3,"sources":["ErrorBoundary.tsx","history.ts","redux/reducers/index.ts","redux/configureStore.js","redux/sagas/index.js","redux/index.ts","App/App.tsx","serviceWorker.ts","index.tsx"],"names":["ErrorBoundary","props","state","error","errorInfo","this","setState","console","log","children","React","history","createBrowserHistory","path","exec","window","location","hash","replace","createRootReducer","combineReducers","rootReducer","sagaMiddleware","createSagaMiddleware","rootSaga","all","store","initialState","createStore","composeWithDevTools","applyMiddleware","thunk","runSaga","run","configureStore","App","GooglePreview","title","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"gNAEaA,EAAb,kDACE,WAAYC,GAAsB,IAAD,8BAC/B,cAAMA,IACDC,MAAQ,CAAEC,MAAO,MAFS,EADnC,8DAM2BA,EAAcC,GACrCC,KAAKC,SAAS,CAAEH,UAChBI,QAAQC,IAAIL,KARhB,+BAYI,OAAOE,KAAKJ,MAAMQ,aAZtB,GAAmCC,a,yDCA7BC,EAAUC,cAEVC,GAAQ,YAAYC,KAAKC,OAAOC,SAASC,OAAS,IAAI,GACxDJ,GACFF,EAAQO,QAAQL,GAGHF,ICNFQ,EAAoB,kBAAMC,0BAAgB,KCKjDC,EAAcF,IACdG,EAAiBC,c,yBCPVC,EAAQ,UAAG,SAAXA,IAAW,iEACtB,OADsB,SAChBC,YAAI,IADY,oCAAXD,MCEPE,EFOwB,SAACC,GAC3B,IAAMD,EAAQE,sBACVP,EACAM,EACAE,8BAAoBC,0BAAgBC,IAAOT,KAE/C,OAAO,2BAAKI,GAAZ,IAAmBM,QAASV,EAAeW,MEbjCC,GACdR,EAAMM,QAAQR,GCYCW,MAVf,WACE,OACE,kBAAC,IAAD,CAAUT,MAAOA,GACf,kBAAC,EAAD,KACE,kBAACU,EAAA,EAAD,CAAeC,MAAM,4C,OCCTC,QACW,cAA7BvB,OAAOC,SAASuB,UAEe,UAA7BxB,OAAOC,SAASuB,UAEhBxB,OAAOC,SAASuB,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD8HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAACC,GACLA,EAAaC,gBAEdC,OAAM,SAACjD,GACNI,QAAQJ,MAAMA,EAAMkD,a","file":"static/js/main.6ad32b02.chunk.js","sourcesContent":["import * as React from 'react';\n\nexport class ErrorBoundary extends React.Component {\n  constructor(props: Readonly<{}>) {\n    super(props);\n    this.state = { error: null };\n  }\n\n  public componentDidCatch(error: Error, errorInfo: React.ErrorInfo) {\n    this.setState({ error });\n    console.log(error); // tslint:disable-line\n  }\n\n  public render() {\n    return this.props.children;\n  }\n}\n","import { createBrowserHistory } from 'history';\n\nconst history = createBrowserHistory();\n\nconst path = (/#!(\\/.*)$/.exec(window.location.hash) || [])[1];\nif (path) {\n  history.replace(path);\n}\n\nexport default history;\n","import 'history';\nimport { combineReducers } from 'redux';\n\nexport const createRootReducer = () => combineReducers({});\nexport default createRootReducer;\n","import { applyMiddleware, createStore } from 'redux';\nimport thunk from 'redux-thunk';\nimport createSagaMiddleware from 'redux-saga';\nimport { composeWithDevTools } from 'redux-devtools-extension/logOnlyInProduction';\n\nimport history from '../history';\nimport { createRootReducer } from './reducers';\n\nconst rootReducer = createRootReducer(history);\nconst sagaMiddleware = createSagaMiddleware();\n\nexport const configureStore = (initialState) => {\n    const store = createStore(\n        rootReducer,\n        initialState,\n        composeWithDevTools(applyMiddleware(thunk, sagaMiddleware))\n    );\n    return { ...store, runSaga: sagaMiddleware.run };\n};\n","import {all} from \"redux-saga/effects\";\n\nexport const rootSaga = function*() {\n  yield all([]);\n}\n","import { configureStore } from './configureStore';\n\nimport { rootSaga } from './sagas';\n\nconst store = configureStore();\nstore.runSaga(rootSaga);\n\nexport { store };\n","import React from 'react';\nimport { Provider } from 'react-redux';\nimport { ErrorBoundary } from '../ErrorBoundary';\nimport { GooglePreview } from 'wix-style-react';\n\nimport { store } from '../redux';\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <ErrorBoundary>\n        <GooglePreview title=\"Learn some react with Wix components\" />\n      </ErrorBoundary>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}